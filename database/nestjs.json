{
  "root": [
    {
      "name": "interfaces",
      "sub": [
        {
          "files": [
            {
              "sufix": "interface",
              "prefix": "find",
              "ext": "ts",
              "content": [
                "export interface IFind${1} {",
                "",
                "}"
              ]
            }
          ]
        },
        {
          "files": [
            {
              "sufix": "interface",
              "prefix": "create",
              "ext": "ts",
              "content": [
                "export interface ICreate${1} {",
                "",
                "}"
              ]
            }
          ]
        },
        {
          "files": [
            {
              "sufix": "interface",
              "prefix": "update",
              "ext": "ts",
              "content": [
                "export interface IUpdate${1} {",
                "",
                "}"
              ]
            }
          ]
        },
        {
          "files": [
            {
              "sufix": "interface",
              "prefix": "delete",
              "ext": "ts",
              "content": [
                "export interface IDelete${1} {",
                "",
                "}"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "dto",
      "sub": [
        {
          "files": [
            {
              "sufix": "dto",
              "prefix": "create",
              "ext": "ts",
              "content": [
                "import {",
                "  IsString,",
                "  IsNotEmpty,",
                "  IsOptional,",
                "  MinLength,",
                "  IsStrongPassword,",
                "  IsNumber",
                "} from 'class-validator';",
                "import { ICreate${1} } from '../interfaces/create-${2}.interface';",
                "",
                "export class Create${1}Dto implements ICreate${1} {",
                "  @IsNotEmpty()",
                "  @IsOptional()",
                "  @IsString()",
                "  @IsNumber()",
                "  @MinLength(10, {",
                "    message: 'common.string.tooshort',",
                "  })",
                "  login: string;",
                "",
                "  @IsStrongPassword(",
                "  {",
                "    minLength: 10,",
                "    minLowercase: 1,",
                "    minNumbers: 1,",
                "    minSymbols: 1,",
                "    minUppercase: 1,",
                "  },",
                "  {",
                "    message: 'signUp.password.tooweak',",
                "  },",
                "  )",
                "",
                "  password: string;",
                "}"
              ]
            },
            {
              "sufix": "dto",
              "prefix": "update",
              "ext": "ts",
              "content": [
                "import {",
                "  IsString,",
                "  IsNotEmpty,",
                "  IsOptional,",
                "  MinLength,",
                "  IsStrongPassword,",
                "  IsNumber",
                "} from 'class-validator';",
                "import { IUpdate${1} } from '../interfaces/update-${2}.interface';",
                "",
                "export class Update${1}Dto implements IUpdate${1} {",
                "  @IsNotEmpty()",
                "  @IsOptional()",
                "  @IsString()",
                "  @IsNumber()",
                "  @MinLength(10, {",
                "    message: 'common.string.tooshort',",
                "  })",
                "  login: string;",
                "",
                "  @IsStrongPassword(",
                "  {",
                "    minLength: 10,",
                "    minLowercase: 1,",
                "    minNumbers: 1,",
                "    minSymbols: 1,",
                "    minUppercase: 1,",
                "  },",
                "  {",
                "    message: 'signUp.password.tooweak',",
                "  },",
                "  )",
                "",
                "  password: string;",
                "}"
              ]
            },
            {
              "sufix": "dto",
              "prefix": "delete",
              "ext": "ts",
              "content": [
                "import {",
                "  IsString,",
                "  IsNotEmpty,",
                "  IsOptional,",
                "  MinLength,",
                "  IsStrongPassword,",
                "  IsNumber",
                "} from 'class-validator';",
                "import { IDelete${1} } from '../interfaces/delete-${2}.interface';",
                "",
                "export class Delete${1}Dto implements IDelete${1} {",
                "  @IsNotEmpty()",
                "  @IsOptional()",
                "  @IsString()",
                "  @IsNumber()",
                "  @MinLength(10, {",
                "    message: 'common.string.tooshort',",
                "  })",
                "  login: string;",
                "",
                "  @IsStrongPassword(",
                "  {",
                "    minLength: 10,",
                "    minLowercase: 1,",
                "    minNumbers: 1,",
                "    minSymbols: 1,",
                "    minUppercase: 1,",
                "  },",
                "  {",
                "    message: 'signUp.password.tooweak',",
                "  },",
                "  )",
                "",
                "  password: string;",
                "}"
              ]
            },
            {
              "sufix": "dto",
              "prefix": "find",
              "ext": "ts",
              "content": [
                "import {",
                "  IsString,",
                "  IsNotEmpty,",
                "  IsOptional,",
                "  MinLength,",
                "  IsStrongPassword,",
                "  IsNumber",
                "} from 'class-validator';",
                "import { IFind${1} } from '../interfaces/find-${2}.interface';",
                "",
                "export class Find${1}Dto implements IFind${1} {",
                "  @IsNotEmpty()",
                "  @IsOptional()",
                "  @IsString()",
                "  @IsNumber()",
                "  @MinLength(10, {",
                "    message: 'common.string.tooshort',",
                "  })",
                "  login: string;",
                "",
                "  @IsStrongPassword(",
                "  {",
                "    minLength: 10,",
                "    minLowercase: 1,",
                "    minNumbers: 1,",
                "    minSymbols: 1,",
                "    minUppercase: 1,",
                "  },",
                "  {",
                "    message: 'signUp.password.tooweak',",
                "  },",
                "  )",
                "",
                "  password: string;",
                "}"
              ]
            }
          ]
        }
      ]
    },
    {
      "files": [
        {
          "sufix": "module",
          "prefix": "",
          "ext": "ts",
          "content": [
            "import { Module } from '@nestjs/common';",
            "import { ${1}Service } from './${2}.service';",
            "import { ${1}Controller } from './${2}.controller';",
            "import { PrismaModule } from 'src/prisma/prisma.module';",
            "@Module({",
            "  imports: [PrismaModule],",
            "  controllers: [${1}Controller],",
            "  providers: [${1}Service],",
            "})",
            "export class ${1}Module {}"
          ]
        },
        {
          "sufix": "controller",
          "prefix": "",
          "ext": "ts",
          "content": [
            "import {",
            "  Controller,",
            "  Get,",
            "  Body,",
            "  Param,",
            "  Post,",
            "  Patch,",
            "  Delete,",
            "  HttpException,",
            "  UseGuards,",
            "} from '@nestjs/common';",
            "import { AdminRoleGuard } from 'src/shared/guards/role-admin.guard';",
            "import { ${1}Service } from './${2}.service';",
            "import { Find${1}Dto } from './dto/find-${2}.dto';",
            "import { Create${1}Dto } from './dto/create-${2}.dto';",
            "import { Update${1}Dto } from './dto/update-${2}.dto';",
            "",
            "@Controller('${2}')",
            "export class ${1}Controller {",
            "  constructor(private readonly ${3}Service: ${1}Service) {}",
            "",
            "  @Get('/:id')",
            "  async find(@Param() param: Find${1}Dto) {",
            "    const request = await this.${3}Service.find(param);",
            "    // if (request.statusCode >= 400) {",
            "    //   throw new HttpException(request, request.statusCode);",
            "    // }",
            "    return request;",
            "  }",
            "",
            "  @Get()",
            "  async findAll() {",
            "    const request = await this.${3}Service.findAll();",
            "    // if (request.statusCode >= 400) {",
            "    //   throw new HttpException(request, request.statusCode);",
            "    // }",
            "    return request;",
            "  }",
            "",
            "  @Post()",
            "  @UseGuards(AdminRoleGuard)",
            "  async create(@Body() body: Create${1}Dto) {",
            "    const request = await this.${3}Service.create(body);",
            "    // if (request.statusCode >= 400) {",
            "    //   throw new HttpException(request, request.statusCode);",
            "    // }",
            "    return request;",
            "  }",
            "",
            "  @Patch()",
            "  @UseGuards(AdminRoleGuard)",
            "  async update(@Body() body: Update${1}Dto) {",
            "    const request = await this.${3}Service.update(body);",
            "    // if (request.statusCode >= 400) {",
            "    //   throw new HttpException(request, request.statusCode);",
            "    // }",
            "    return request;",
            "  }",
            "",
            "  @Delete('/:id')",
            "  @UseGuards(AdminRoleGuard)",
            "  async remove(@Param() param: Find${1}Dto) {",
            "    const request = await this.${3}Service.remove(param);",
            "    // if (request.statusCode >= 400) {",
            "    //  throw new HttpException(request, request.statusCode);",
            "    // }",
            "    return request;",
            "  }",
            "}"
          ]
        },
        {
          "sufix": "service",
          "prefix": "",
          "ext": "ts",
          "content": [
            "import { Injectable } from '@nestjs/common';",
            "import { PrismaService } from 'src/prisma/prisma.service';",
            "",
            "import { IPrisma${1} } from 'src/shared/interfaces/prisma/prisma-${2}.interface';",
            "import { IFind${1} } from './interfaces/find-${2}.interface';",
            "import { ICreate${1} } from './interfaces/create-${2}.interface';",
            "import { IUpdate${1} } from './interfaces/update-${2}.interface';",
            "import { IDelete${1} } from './interfaces/delete-${2}.interface';",
            "",
            "@Injectable()",
            "export class ${1}Service {",
            "  constructor(private prisma: PrismaService) {}",
            "",
            "  async find(param: IFind${1}) {",
            "    try {",
            "      const request: IPrisma${1} = await this.prisma.${3}.findFirst({",
            "        where: {}",
            "      });",
            "      if (!request?.id) {",
            "        return {};",
            "      }",
            "      return request;",
            "    } catch (error) {",
            "      console.log(error);",
            "    }",
            "  }",
            "",
            "  async findAll() {",
            "    try {",
            "      const request = await this.prisma.${3}.findMany({",
            "        where: {}",
            "      });",
            "      if (request.length <= 0) {",
            "        return {};",
            "      }",
            "      return request;",
            "    } catch (error) {",
            "      console.log(error);",
            "    }",
            "  }",
            "",
            "  async create(body: ICreate${1}) {",
            "    try {",
            "      const request = await this.prisma.${3}.create({});",
            "      if (!request.id) {",
            "        return {};",
            "      }",
            "      return request;",
            "    } catch (error) {",
            "      console.log(error);",
            "    }",
            "  }",
            "",
            "  async update(body: IUpdate${1}) {",
            "    try {",
            "      const request = await this.prisma.${3}.update({});",
            "      if (!request?.id) {",
            "        return {};",
            "      }",
            "      return request;",
            "    } catch (error) {",
            "      console.log(error);",
            "    }",
            "  }",
            "",
            "  async remove(param: IDelete${1}) {",
            "    try {",
            "      const request: IPrisma${1} = await this.prisma.${3}.deactivate({",
            "        where: { id: Number(param.id) },",
            "      });",
            "      if (!request?.id) {",
            "        return {};",
            "      }",
            "      return request;",
            "    } catch (error) {",
            "      console.log(error);",
            "    }",
            "  }",
            "}"
          ]
        }
      ]
    }
  ]
}